TODO:
 - Test cases
   Verify client_encoding, etc.

 - Documentation

 - Bytea support

 - BLOB support
   ?? as blob objects?

 - Document DATE/TIMESTAMP Date/DateTime dissonance
   Ruby and PG don't agree on calendar reforms hundreds of years ago...

 - Packaging
   . set version in a VERSION file

 - types.rb, type conversions
   . Rename to type.rb, reimplement in C or autoload in ruby?
   . Typemap OIDs:  We guess right now that Oid is big-endian 32 bit int,
     but pg defines as "unsigned int".  Should avoid question of
     representation entirely, just leave opaque.
   . Simpler type management:
     - Subclass Type::Array per-connection, passing in the simple map of
       { Oid => typname } (default 'varchar').  Avoids creating ArrayFoo
       classes for every type not handled specially.  Don't record any
       array Oids in the per-connection typemap.

 - type support
   . BIT
   . BLOBs

   . bytea
     Decision needed on intelligent inference of bytea encoding.  Ideally,
     AltPg could detect whether a String contained chars outside the
     permissible character set, but we may have to require explicit bytea
     parameter binding...

 - AltPg.translate_params
   . dup sql iff substitution is being made?
   . return no. of params?
   . return normalized first verb?

 - AltPg::Database
   . COPY support
     dbh.func :pq_put_copy_data, :pq_put_copy_end, :pq_get_copy_data
   . PQ* status function attributes
     dbh['altpg_backend_pid'], 'altpg_transaction_status' => :PQTRANS_IDLE,
     etc.

 - AltPg::Statement
   . prepare() efficiency, DBD::Pg guidance
     defer PREP until first execution?  (Allow type hints?)
     expose sth['altpg_statement_name'] ?
     only PREP S/I/U/D/V statements?
   . cache column_info -- called twice by DBI currently per execute
   . sth.func(:describe) ... PQsendDescribePrepared
     pg >= 8.1
     How to communicate results?  Could set up @column_info, return
     @param_info ?  DBI won't let us call column_info() prior to execute

 - Choke if not integer datestyle?

DONE:
 - PQnotifies support

 - restrict to protocol 3, server version 8.0+

 - Dropped 'text' support

 - array support

 - h['altpg_client_encoding']

 - dbh.__set_variable, dbh.__show_variable

 - dbd_db.do() parameterization

 - StatementHandle parameterized query support

 - dbd_db.do() direct (unprepared) execution implementation

 - workaround dbi-0.4.3 default String parameter conversion
   It quotes, but we want the backend to do that

 - support precision, scale in dbd_db.columns, dbd_st.column_info
   (without extraneous SQL lookup)

 - 'async' connection and execution
   i.e., don't block ruby threads

 - dbd_st.finish implies DEALLOCATE
   n.b.: forgotten statements are never DEALLOCATEd, and that's ok

 - avoid PREPAREd statement name collision
