TODO:
 - Test cases
   Verify client_encoding, etc.

 - Documentation

 - Binary protocol (not text) support
   ?? Unclear if packing/unpacking will be faster than stringifying
   dbh['altpg_result_format'] and sth['altpg_result_format']

 - restrict to protocol 3, server version 8.0+

 - BLOB support
   ?? as blob objects?

 - array support

 - Document DATE/TIMESTAMP Date/DateTime dissonance
   Ruby and PG don't agree on calendar reforms hundreds of years ago...

 - gem-ify

 - types.rb, type conversions
   . Rename to type.rb, reimplement in C or autoload in ruby?
   . Typemap OIDs:  We guess right now that Oid is big-endian 32 bit int,
     but pg defines as "unsigned int".  Should avoid question of
     representation entirely, just leave opaque.
   . Drop 'text' protocol support
   . Move pg_type.typname => AltPg:: class name map into AltPg::Type,
     and out of a case/when function in database.rb.

 - AltPg::Statement
   . cache column_info -- called at least twice?

DONE:
 - h['altpg_client_encoding']

 - dbh.__set_variable, dbh.__show_variable

 - dbd_db.do() parameterization

 - StatementHandle parameterized query support

 - dbd_db.do() direct (unprepared) execution implementation

 - workaround dbi-0.4.3 default String parameter conversion
   It quotes, but we want the backend to do that

 - support precision, scale in dbd_db.columns, dbd_st.column_info
   (without extraneous SQL lookup)

 - 'async' connection and execution
   i.e., don't block ruby threads

 - dbd_st.finish implies DEALLOCATE
   n.b.: forgotten statements are never DEALLOCATEd, and that's ok

 - avoid PREPAREd statement name collision
